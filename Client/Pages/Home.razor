@page "/"
@using Models
@inject HttpClient Http
@using System.Net.Http.Json

<h3>Управление курсами</h3>

<div class="row mb-3">
    <div class="col">
        <button class="btn btn-primary" @onclick="AddNewCourse">Добавить курс</button>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Название</th>
            <th>Язык программирования</th>
            <th>Действия</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var course in Courses)
        {
            <tr>
                <td>@course.Name</td>
                <td>@course.Description</td>
                <td>
                    <button class="btn btn-sm btn-warning" @onclick="() => AddNewCourse()">Добавить курс</button>
                    <button class="btn btn-sm btn-warning" @onclick="() => EditCourse(course)">Редактировать</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteCourse(course)">Удалить</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Data> Courses { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        UpdatedData();
    }

    protected override async Task OnParametersSetAsync()
    {
        UpdatedData();
    }

    private async Task UpdatedData()
    {
        try
        {
            Courses = await Http.GetFromJsonAsync<List<Data>>("api/AdminPage") ?? new();
        }
        catch (Exception ex)
        {
            // Обработка ошибок
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task AddNewCourse()
    {
        var newCourse = new Data
            {
                Name = "Новый курс",
                Description = "Описание курса",
                Progress = 0
            };

        var response = await Http.PostAsJsonAsync("api/AdminPage/create", newCourse);
        if (response.IsSuccessStatusCode)
        {
            Courses = await Http.GetFromJsonAsync<List<Data>>("api/AdminPage/all") ?? new();
        }
    }

    private async Task EditCourse(Data course)
    {
        var response = await Http.PutAsJsonAsync($"api/AdminPage/{course.Id}", course);
        if (response.IsSuccessStatusCode)
        {
            Courses = await Http.GetFromJsonAsync<List<Data>>("api/AdminPage") ?? new();
        }
    }

    private async Task DeleteCourse(Data course)
    {
        var response = await Http.DeleteAsync($"api/AdminPage/{course.Id}");
        if (response.IsSuccessStatusCode)
        {
            Courses = await Http.GetFromJsonAsync<List<Data>>("api/AdminPage") ?? new();
        }
    }
}